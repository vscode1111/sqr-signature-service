/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SQRPaymentGateway {
  export type FundItemStruct = {
    depositedAmount: BigNumberish;
    withdrewAmount: BigNumberish;
  };

  export type FundItemStructOutput = [
    depositedAmount: bigint,
    withdrewAmount: bigint
  ] & { depositedAmount: bigint; withdrewAmount: bigint };

  export type TransactionItemStruct = { amount: BigNumberish };

  export type TransactionItemStructOutput = [amount: bigint] & {
    amount: bigint;
  };
}

export interface SQRPaymentGatewayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "MAX_INT"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "balanceLimit"
      | "balanceOf"
      | "calculateRemainDeposit"
      | "calculateRemainWithdraw"
      | "changeBalanceLimit"
      | "closeDate"
      | "coldWallet"
      | "deposit"
      | "depositGoal"
      | "depositSig"
      | "depositVerifier"
      | "erc20Token"
      | "fetchFundItem"
      | "fetchTransactionItem"
      | "forceWithdraw"
      | "getBalance"
      | "getDepositNonce"
      | "getWithdrawNonce"
      | "initialize"
      | "owner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "startDate"
      | "totalDeposited"
      | "totalWithdrew"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawGoal"
      | "withdrawSig"
      | "withdrawVerifier"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ChangeBalanceLimit"
      | "Deposit"
      | "ForceWithdraw"
      | "Initialized"
      | "OwnershipTransferred"
      | "Upgraded"
      | "Withdraw"
  ): EventFragment;

  encodeFunctionData(functionFragment: "MAX_INT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceLimit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "calculateRemainDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "changeBalanceLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "closeDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "coldWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositSig",
    values: [string, string, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Token",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchFundItem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactionItem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "forceWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getWithdrawNonce",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      AddressLike,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      string,
      string,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSig",
    values: [string, string, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawVerifier",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "MAX_INT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeBalanceLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "coldWallet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "erc20Token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchFundItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forceWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWithdrawNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawVerifier",
    data: BytesLike
  ): Result;
}

export namespace ChangeBalanceLimitEvent {
  export type InputTuple = [sender: AddressLike, balanceLimit: BigNumberish];
  export type OutputTuple = [sender: string, balanceLimit: bigint];
  export interface OutputObject {
    sender: string;
    balanceLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ForceWithdrawEvent {
  export type InputTuple = [
    token: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [token: string, to: string, amount: bigint];
  export interface OutputObject {
    token: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawEvent {
  export type InputTuple = [
    account: AddressLike,
    to: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [account: string, to: string, amount: bigint];
  export interface OutputObject {
    account: string;
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRPaymentGateway extends BaseContract {
  connect(runner?: ContractRunner | null): SQRPaymentGateway;
  waitForDeployment(): Promise<this>;

  interface: SQRPaymentGatewayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  MAX_INT: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  balanceLimit: TypedContractMethod<[], [bigint], "view">;

  balanceOf: TypedContractMethod<[userId: string], [bigint], "view">;

  calculateRemainDeposit: TypedContractMethod<[], [bigint], "view">;

  calculateRemainWithdraw: TypedContractMethod<[], [bigint], "view">;

  changeBalanceLimit: TypedContractMethod<
    [_balanceLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  closeDate: TypedContractMethod<[], [bigint], "view">;

  coldWallet: TypedContractMethod<[], [string], "view">;

  deposit: TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      account: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      timestampLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  depositGoal: TypedContractMethod<[], [bigint], "view">;

  depositSig: TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      account: AddressLike,
      amount: BigNumberish,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  depositVerifier: TypedContractMethod<[], [string], "view">;

  erc20Token: TypedContractMethod<[], [string], "view">;

  fetchFundItem: TypedContractMethod<
    [userId: string],
    [SQRPaymentGateway.FundItemStructOutput],
    "view"
  >;

  fetchTransactionItem: TypedContractMethod<
    [transactionId: string],
    [SQRPaymentGateway.TransactionItemStructOutput],
    "view"
  >;

  forceWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getDepositNonce: TypedContractMethod<[userId: string], [bigint], "view">;

  getWithdrawNonce: TypedContractMethod<[userId: string], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _newOwner: AddressLike,
      _erc20Token: AddressLike,
      _depositVerifier: AddressLike,
      _depositGoal: BigNumberish,
      _withdrawVerifier: AddressLike,
      _withdrawGoal: BigNumberish,
      _startDate: BigNumberish,
      _closeDate: BigNumberish,
      _coldWallet: AddressLike,
      _balanceLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  totalWithdrew: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      to: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      timestampLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawGoal: TypedContractMethod<[], [bigint], "view">;

  withdrawSig: TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      to: AddressLike,
      amount: BigNumberish,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  withdrawVerifier: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "MAX_INT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[userId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainWithdraw"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "changeBalanceLimit"
  ): TypedContractMethod<[_balanceLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "coldWallet"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      account: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      timestampLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositGoal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositSig"
  ): TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      account: AddressLike,
      amount: BigNumberish,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "erc20Token"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fetchFundItem"
  ): TypedContractMethod<
    [userId: string],
    [SQRPaymentGateway.FundItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchTransactionItem"
  ): TypedContractMethod<
    [transactionId: string],
    [SQRPaymentGateway.TransactionItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "forceWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositNonce"
  ): TypedContractMethod<[userId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "getWithdrawNonce"
  ): TypedContractMethod<[userId: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _newOwner: AddressLike,
      _erc20Token: AddressLike,
      _depositVerifier: AddressLike,
      _depositGoal: BigNumberish,
      _withdrawVerifier: AddressLike,
      _withdrawGoal: BigNumberish,
      _startDate: BigNumberish,
      _closeDate: BigNumberish,
      _coldWallet: AddressLike,
      _balanceLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrew"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      to: AddressLike,
      amount: BigNumberish,
      nonce: BigNumberish,
      timestampLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawGoal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdrawSig"
  ): TypedContractMethod<
    [
      userId: string,
      transactionId: string,
      to: AddressLike,
      amount: BigNumberish,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawVerifier"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ChangeBalanceLimit"
  ): TypedContractEvent<
    ChangeBalanceLimitEvent.InputTuple,
    ChangeBalanceLimitEvent.OutputTuple,
    ChangeBalanceLimitEvent.OutputObject
  >;
  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "ForceWithdraw"
  ): TypedContractEvent<
    ForceWithdrawEvent.InputTuple,
    ForceWithdrawEvent.OutputTuple,
    ForceWithdrawEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Withdraw"
  ): TypedContractEvent<
    WithdrawEvent.InputTuple,
    WithdrawEvent.OutputTuple,
    WithdrawEvent.OutputObject
  >;

  filters: {
    "ChangeBalanceLimit(address,uint256)": TypedContractEvent<
      ChangeBalanceLimitEvent.InputTuple,
      ChangeBalanceLimitEvent.OutputTuple,
      ChangeBalanceLimitEvent.OutputObject
    >;
    ChangeBalanceLimit: TypedContractEvent<
      ChangeBalanceLimitEvent.InputTuple,
      ChangeBalanceLimitEvent.OutputTuple,
      ChangeBalanceLimitEvent.OutputObject
    >;

    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "ForceWithdraw(address,address,uint256)": TypedContractEvent<
      ForceWithdrawEvent.InputTuple,
      ForceWithdrawEvent.OutputTuple,
      ForceWithdrawEvent.OutputObject
    >;
    ForceWithdraw: TypedContractEvent<
      ForceWithdrawEvent.InputTuple,
      ForceWithdrawEvent.OutputTuple,
      ForceWithdrawEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "Withdraw(address,address,uint256)": TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
    Withdraw: TypedContractEvent<
      WithdrawEvent.InputTuple,
      WithdrawEvent.OutputTuple,
      WithdrawEvent.OutputObject
    >;
  };
}
