/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SQRpProRata {
  export type TransactionItemStruct = { amount: BigNumberish };

  export type TransactionItemStructOutput = [amount: bigint] & {
    amount: bigint;
  };

  export type UserStruct = {
    depositedAmount: BigNumberish;
    nonce: BigNumberish;
  };

  export type UserStructOutput = [depositedAmount: bigint, nonce: bigint] & {
    depositedAmount: bigint;
    nonce: bigint;
  };
}

export interface SQRpProRataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "balanceOf"
      | "baseToken"
      | "boostToken"
      | "calculateAccountRefundAmount"
      | "calculateOverfundAmount"
      | "calculateRemainDeposit"
      | "closeDate"
      | "depositSig"
      | "fetchTransactionItem"
      | "fetchUser"
      | "getBalance"
      | "getDepositNonce"
      | "getDepositedAmount"
      | "getProcessedUserIndex"
      | "getTotalDeposited"
      | "getUserAddress"
      | "getUserCount"
      | "goal"
      | "initialize"
      | "isAfterCloseDate"
      | "isBeforeStartDate"
      | "isReady"
      | "owner"
      | "proxiableUUID"
      | "refund"
      | "refundAll"
      | "renounceOwnership"
      | "startDate"
      | "totalDeposited"
      | "totalWithdrew"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "verifier"
      | "withdrawGoal"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Initialized"
      | "OwnershipTransferred"
      | "Refund"
      | "Upgraded"
      | "WithdrawGoal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountRefundAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOverfundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closeDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositSig",
    values: [BigNumberish, boolean, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactionItem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositedAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessedUserIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "goal", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAfterCloseDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBeforeStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isReady", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refundAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWithdrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawGoal",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "boostToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOverfundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeDate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fetchUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessedUserIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAfterCloseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeforeStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isReady", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawGoal",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [account: AddressLike, amount: BigNumberish];
  export type OutputTuple = [account: string, amount: bigint];
  export interface OutputObject {
    account: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawGoalEvent {
  export type InputTuple = [to: AddressLike, amount: BigNumberish];
  export type OutputTuple = [to: string, amount: bigint];
  export interface OutputObject {
    to: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRpProRata extends BaseContract {
  connect(runner?: ContractRunner | null): SQRpProRata;
  waitForDeployment(): Promise<this>;

  interface: SQRpProRataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  baseToken: TypedContractMethod<[], [string], "view">;

  boostToken: TypedContractMethod<[], [string], "view">;

  calculateAccountRefundAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateOverfundAmount: TypedContractMethod<[], [bigint], "view">;

  calculateRemainDeposit: TypedContractMethod<[], [bigint], "view">;

  closeDate: TypedContractMethod<[], [bigint], "view">;

  depositSig: TypedContractMethod<
    [
      amount: BigNumberish,
      boost: boolean,
      transactionId: string,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  fetchTransactionItem: TypedContractMethod<
    [transactionId: string],
    [SQRpProRata.TransactionItemStructOutput],
    "view"
  >;

  fetchUser: TypedContractMethod<
    [account: AddressLike],
    [SQRpProRata.UserStructOutput],
    "view"
  >;

  getBalance: TypedContractMethod<[], [bigint], "view">;

  getDepositNonce: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getDepositedAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getProcessedUserIndex: TypedContractMethod<[], [bigint], "view">;

  getTotalDeposited: TypedContractMethod<[], [bigint], "view">;

  getUserAddress: TypedContractMethod<[index: BigNumberish], [string], "view">;

  getUserCount: TypedContractMethod<[], [bigint], "view">;

  goal: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _newOwner: AddressLike,
      _baseToken: AddressLike,
      _boostToken: AddressLike,
      _verifier: AddressLike,
      _goal: BigNumberish,
      _startDate: BigNumberish,
      _closeDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  isAfterCloseDate: TypedContractMethod<[], [boolean], "view">;

  isBeforeStartDate: TypedContractMethod<[], [boolean], "view">;

  isReady: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[_batchSize: BigNumberish], [void], "nonpayable">;

  refundAll: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  totalDeposited: TypedContractMethod<[], [bigint], "view">;

  totalWithdrew: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  verifier: TypedContractMethod<[], [string], "view">;

  withdrawGoal: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boostToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateAccountRefundAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOverfundAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositSig"
  ): TypedContractMethod<
    [
      amount: BigNumberish,
      boost: boolean,
      transactionId: string,
      timestampLimit: BigNumberish,
      signature: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "fetchTransactionItem"
  ): TypedContractMethod<
    [transactionId: string],
    [SQRpProRata.TransactionItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchUser"
  ): TypedContractMethod<
    [account: AddressLike],
    [SQRpProRata.UserStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositNonce"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDepositedAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProcessedUserIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUserAddress"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getUserCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "goal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _newOwner: AddressLike,
      _baseToken: AddressLike,
      _boostToken: AddressLike,
      _verifier: AddressLike,
      _goal: BigNumberish,
      _startDate: BigNumberish,
      _closeDate: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAfterCloseDate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBeforeStartDate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_batchSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalWithdrew"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "verifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawGoal"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawGoal"
  ): TypedContractEvent<
    WithdrawGoalEvent.InputTuple,
    WithdrawGoalEvent.OutputTuple,
    WithdrawGoalEvent.OutputObject
  >;

  filters: {
    "Deposit(address,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Refund(address,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawGoal(address,uint256)": TypedContractEvent<
      WithdrawGoalEvent.InputTuple,
      WithdrawGoalEvent.OutputTuple,
      WithdrawGoalEvent.OutputObject
    >;
    WithdrawGoal: TypedContractEvent<
      WithdrawGoalEvent.InputTuple,
      WithdrawGoalEvent.OutputTuple,
      WithdrawGoalEvent.OutputObject
    >;
  };
}
