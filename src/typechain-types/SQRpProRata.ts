/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace SQRpProRata {
  export type DepositSigParamsStruct = {
    baseAmount: BigNumberish;
    boost: boolean;
    boostExchangeRate: BigNumberish;
    transactionId: string;
    timestampLimit: BigNumberish;
    signature: BytesLike;
  };

  export type DepositSigParamsStructOutput = [
    baseAmount: bigint,
    boost: boolean,
    boostExchangeRate: bigint,
    transactionId: string,
    timestampLimit: bigint,
    signature: string
  ] & {
    baseAmount: bigint;
    boost: boolean;
    boostExchangeRate: bigint;
    transactionId: string;
    timestampLimit: bigint;
    signature: string;
  };

  export type AccountInfoStruct = {
    baseDeposited: BigNumberish;
    boosted: boolean;
    baseAllocation: BigNumberish;
    baseDeposit: BigNumberish;
    baseRefund: BigNumberish;
    baseRefunded: BigNumberish;
    boostDeposit: BigNumberish;
    boostRefund: BigNumberish;
    boostRefunded: BigNumberish;
    nonce: BigNumberish;
    boostAverageExchangeRate: BigNumberish;
    share: BigNumberish;
  };

  export type AccountInfoStructOutput = [
    baseDeposited: bigint,
    boosted: boolean,
    baseAllocation: bigint,
    baseDeposit: bigint,
    baseRefund: bigint,
    baseRefunded: bigint,
    boostDeposit: bigint,
    boostRefund: bigint,
    boostRefunded: bigint,
    nonce: bigint,
    boostAverageExchangeRate: bigint,
    share: bigint
  ] & {
    baseDeposited: bigint;
    boosted: boolean;
    baseAllocation: bigint;
    baseDeposit: bigint;
    baseRefund: bigint;
    baseRefunded: bigint;
    boostDeposit: bigint;
    boostRefund: bigint;
    boostRefunded: bigint;
    nonce: bigint;
    boostAverageExchangeRate: bigint;
    share: bigint;
  };

  export type TransactionItemStruct = { amount: BigNumberish };

  export type TransactionItemStructOutput = [amount: bigint] & {
    amount: bigint;
  };

  export type ContractParamsStruct = {
    newOwner: AddressLike;
    baseToken: AddressLike;
    baseDecimals: BigNumberish;
    boostToken: AddressLike;
    boostDecimals: BigNumberish;
    depositVerifier: AddressLike;
    baseGoal: BigNumberish;
    startDate: BigNumberish;
    closeDate: BigNumberish;
  };

  export type ContractParamsStructOutput = [
    newOwner: string,
    baseToken: string,
    baseDecimals: bigint,
    boostToken: string,
    boostDecimals: bigint,
    depositVerifier: string,
    baseGoal: bigint,
    startDate: bigint,
    closeDate: bigint
  ] & {
    newOwner: string;
    baseToken: string;
    baseDecimals: bigint;
    boostToken: string;
    boostDecimals: bigint;
    depositVerifier: string;
    baseGoal: bigint;
    startDate: bigint;
    closeDate: bigint;
  };
}

export interface SQRpProRataInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "PRECISION_FACTOR"
      | "UPGRADE_INTERFACE_VERSION"
      | "VERSION"
      | "balanceOf"
      | "baseDecimals"
      | "baseGoal"
      | "baseToken"
      | "boostDecimals"
      | "boostToken"
      | "calculateAccidentAmount"
      | "calculateAccountBaseAllocation"
      | "calculateAccountBaseRefund"
      | "calculateAccountBoostAverageExchangeRate"
      | "calculateAccountBoostRefund"
      | "calculateAccountShare"
      | "calculateDecimalsFactors"
      | "calculateExcessBoostAmount"
      | "calculateOverfundAmount"
      | "calculateRemainDeposit"
      | "calculateRemainProcessedAccountAmount"
      | "calculatedBaseSwappedAmount"
      | "calculatedRequiredBoostAmount"
      | "calculatedTotalBoostRefundAmount"
      | "closeDate"
      | "decimalsFactor1"
      | "decimalsFactor2"
      | "depositSig"
      | "depositVerifier"
      | "fetchAccountInfo"
      | "fetchTransactionItem"
      | "getAccountByIndex"
      | "getAccountCount"
      | "getAccountDepositAmount"
      | "getAccountDepositNonce"
      | "getBaseBalance"
      | "getBoostBalance"
      | "getProcessedAccountIndex"
      | "getTotalDeposited"
      | "initialize"
      | "isAfterCloseDate"
      | "isBeforeStartDate"
      | "isDepositReady"
      | "isReachedBaseGoal"
      | "owner"
      | "proxiableUUID"
      | "refund"
      | "refundAll"
      | "renounceOwnership"
      | "startDate"
      | "totalBaseBoostDeposited"
      | "totalBaseDeposited"
      | "totalBaseNonBoostDeposited"
      | "totalBaseRefunded"
      | "totalBaseWithdrew"
      | "totalBoostRefunded"
      | "totalBoostSwapped"
      | "totalBoostWithdrew"
      | "transferOwnership"
      | "upgradeToAndCall"
      | "withdrawBaseGoal"
      | "withdrawBaseSwappedAmount"
      | "withdrawExcessTokens"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Deposit"
      | "Initialized"
      | "OwnershipTransferred"
      | "Refund"
      | "Upgraded"
      | "WithdrawBaseGoal"
      | "WithdrawExcessTokens"
      | "WithdrawSwappedAmount"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "PRECISION_FACTOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "baseDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "baseGoal", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "boostDecimals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "boostToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccidentAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountBaseAllocation",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountBaseRefund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountBoostAverageExchangeRate",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountBoostRefund",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateAccountShare",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateDecimalsFactors",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateExcessBoostAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateOverfundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainDeposit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRemainProcessedAccountAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatedBaseSwappedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatedRequiredBoostAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculatedTotalBoostRefundAmount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "closeDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decimalsFactor1",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decimalsFactor2",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "depositSig",
    values: [SQRpProRata.DepositSigParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositVerifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAccountInfo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchTransactionItem",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDepositAmount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountDepositNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getBaseBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBoostBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProcessedAccountIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [SQRpProRata.ContractParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isAfterCloseDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isBeforeStartDate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isDepositReady",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isReachedBaseGoal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "refund",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "refundAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startDate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalBaseBoostDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseNonBoostDeposited",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBaseWithdrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBoostRefunded",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBoostSwapped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalBoostWithdrew",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBaseGoal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBaseSwappedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawExcessTokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "PRECISION_FACTOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "baseGoal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "boostDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boostToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccidentAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountBaseAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountBaseRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountBoostAverageExchangeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountBoostRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateAccountShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateDecimalsFactors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateExcessBoostAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateOverfundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRemainProcessedAccountAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatedBaseSwappedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatedRequiredBoostAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculatedTotalBoostRefundAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decimalsFactor1",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decimalsFactor2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositSig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAccountInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchTransactionItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDepositAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountDepositNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBoostBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProcessedAccountIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAfterCloseDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isBeforeStartDate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDepositReady",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isReachedBaseGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "refund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "refundAll", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startDate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseBoostDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseNonBoostDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBaseWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBoostRefunded",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBoostSwapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalBoostWithdrew",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBaseGoal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBaseSwappedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawExcessTokens",
    data: BytesLike
  ): Result;
}

export namespace DepositEvent {
  export type InputTuple = [
    account: AddressLike,
    isBoost: boolean,
    baseAmount: BigNumberish,
    boostAmount: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    isBoost: boolean,
    baseAmount: bigint,
    boostAmount: bigint
  ];
  export interface OutputObject {
    account: string;
    isBoost: boolean;
    baseAmount: bigint;
    boostAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RefundEvent {
  export type InputTuple = [
    account: AddressLike,
    isBoost: boolean,
    baseAmount: BigNumberish,
    boostAmount: BigNumberish,
    boostAverageExchangeRate: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    isBoost: boolean,
    baseAmount: bigint,
    boostAmount: bigint,
    boostAverageExchangeRate: bigint
  ];
  export interface OutputObject {
    account: string;
    isBoost: boolean;
    baseAmount: bigint;
    boostAmount: bigint;
    boostAverageExchangeRate: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawBaseGoalEvent {
  export type InputTuple = [account: AddressLike, baseAmount: BigNumberish];
  export type OutputTuple = [account: string, baseAmount: bigint];
  export interface OutputObject {
    account: string;
    baseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawExcessTokensEvent {
  export type InputTuple = [
    account: AddressLike,
    baseAmount: BigNumberish,
    boostDeposit: BigNumberish
  ];
  export type OutputTuple = [
    account: string,
    baseAmount: bigint,
    boostDeposit: bigint
  ];
  export interface OutputObject {
    account: string;
    baseAmount: bigint;
    boostDeposit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawSwappedAmountEvent {
  export type InputTuple = [account: AddressLike, baseAmount: BigNumberish];
  export type OutputTuple = [account: string, baseAmount: bigint];
  export interface OutputObject {
    account: string;
    baseAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SQRpProRata extends BaseContract {
  connect(runner?: ContractRunner | null): SQRpProRata;
  waitForDeployment(): Promise<this>;

  interface: SQRpProRataInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  PRECISION_FACTOR: TypedContractMethod<[], [bigint], "view">;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  balanceOf: TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { baseDeposited: bigint; boostDeposited: bigint }],
    "view"
  >;

  baseDecimals: TypedContractMethod<[], [bigint], "view">;

  baseGoal: TypedContractMethod<[], [bigint], "view">;

  baseToken: TypedContractMethod<[], [string], "view">;

  boostDecimals: TypedContractMethod<[], [bigint], "view">;

  boostToken: TypedContractMethod<[], [string], "view">;

  calculateAccidentAmount: TypedContractMethod<[], [bigint], "view">;

  calculateAccountBaseAllocation: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateAccountBaseRefund: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateAccountBoostAverageExchangeRate: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateAccountBoostRefund: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateAccountShare: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  calculateDecimalsFactors: TypedContractMethod<
    [_baseDecimals: BigNumberish, _boostDecimals: BigNumberish],
    [[bigint, bigint] & { factor1: bigint; factor2: bigint }],
    "view"
  >;

  calculateExcessBoostAmount: TypedContractMethod<[], [bigint], "view">;

  calculateOverfundAmount: TypedContractMethod<[], [bigint], "view">;

  calculateRemainDeposit: TypedContractMethod<[], [bigint], "view">;

  calculateRemainProcessedAccountAmount: TypedContractMethod<
    [],
    [bigint],
    "view"
  >;

  calculatedBaseSwappedAmount: TypedContractMethod<[], [bigint], "view">;

  calculatedRequiredBoostAmount: TypedContractMethod<[], [bigint], "view">;

  calculatedTotalBoostRefundAmount: TypedContractMethod<[], [bigint], "view">;

  closeDate: TypedContractMethod<[], [bigint], "view">;

  decimalsFactor1: TypedContractMethod<[], [bigint], "view">;

  decimalsFactor2: TypedContractMethod<[], [bigint], "view">;

  depositSig: TypedContractMethod<
    [depositSigParams: SQRpProRata.DepositSigParamsStruct],
    [void],
    "nonpayable"
  >;

  depositVerifier: TypedContractMethod<[], [string], "view">;

  fetchAccountInfo: TypedContractMethod<
    [account: AddressLike],
    [SQRpProRata.AccountInfoStructOutput],
    "view"
  >;

  fetchTransactionItem: TypedContractMethod<
    [transactionId: string],
    [SQRpProRata.TransactionItemStructOutput],
    "view"
  >;

  getAccountByIndex: TypedContractMethod<
    [index: BigNumberish],
    [string],
    "view"
  >;

  getAccountCount: TypedContractMethod<[], [bigint], "view">;

  getAccountDepositAmount: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getAccountDepositNonce: TypedContractMethod<
    [account: AddressLike],
    [bigint],
    "view"
  >;

  getBaseBalance: TypedContractMethod<[], [bigint], "view">;

  getBoostBalance: TypedContractMethod<[], [bigint], "view">;

  getProcessedAccountIndex: TypedContractMethod<[], [bigint], "view">;

  getTotalDeposited: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [contractParams: SQRpProRata.ContractParamsStruct],
    [void],
    "nonpayable"
  >;

  isAfterCloseDate: TypedContractMethod<[], [boolean], "view">;

  isBeforeStartDate: TypedContractMethod<[], [boolean], "view">;

  isDepositReady: TypedContractMethod<[], [boolean], "view">;

  isReachedBaseGoal: TypedContractMethod<[], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  refund: TypedContractMethod<[_batchSize: BigNumberish], [void], "nonpayable">;

  refundAll: TypedContractMethod<[], [void], "nonpayable">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  startDate: TypedContractMethod<[], [bigint], "view">;

  totalBaseBoostDeposited: TypedContractMethod<[], [bigint], "view">;

  totalBaseDeposited: TypedContractMethod<[], [bigint], "view">;

  totalBaseNonBoostDeposited: TypedContractMethod<[], [bigint], "view">;

  totalBaseRefunded: TypedContractMethod<[], [bigint], "view">;

  totalBaseWithdrew: TypedContractMethod<[], [bigint], "view">;

  totalBoostRefunded: TypedContractMethod<[], [bigint], "view">;

  totalBoostSwapped: TypedContractMethod<[], [bigint], "view">;

  totalBoostWithdrew: TypedContractMethod<[], [bigint], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdrawBaseGoal: TypedContractMethod<[], [void], "nonpayable">;

  withdrawBaseSwappedAmount: TypedContractMethod<[], [void], "nonpayable">;

  withdrawExcessTokens: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "PRECISION_FACTOR"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<
    [account: AddressLike],
    [[bigint, bigint] & { baseDeposited: bigint; boostDeposited: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "baseDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseGoal"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "boostDecimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "boostToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateAccidentAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccountBaseAllocation"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccountBaseRefund"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccountBoostAverageExchangeRate"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccountBoostRefund"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateAccountShare"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateDecimalsFactors"
  ): TypedContractMethod<
    [_baseDecimals: BigNumberish, _boostDecimals: BigNumberish],
    [[bigint, bigint] & { factor1: bigint; factor2: bigint }],
    "view"
  >;
  getFunction(
    nameOrSignature: "calculateExcessBoostAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateOverfundAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainDeposit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateRemainProcessedAccountAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatedBaseSwappedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatedRequiredBoostAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculatedTotalBoostRefundAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "closeDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimalsFactor1"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimalsFactor2"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositSig"
  ): TypedContractMethod<
    [depositSigParams: SQRpProRata.DepositSigParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositVerifier"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "fetchAccountInfo"
  ): TypedContractMethod<
    [account: AddressLike],
    [SQRpProRata.AccountInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "fetchTransactionItem"
  ): TypedContractMethod<
    [transactionId: string],
    [SQRpProRata.TransactionItemStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAccountByIndex"
  ): TypedContractMethod<[index: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAccountCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountDepositAmount"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getAccountDepositNonce"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBaseBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBoostBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProcessedAccountIndex"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [contractParams: SQRpProRata.ContractParamsStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isAfterCloseDate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isBeforeStartDate"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isDepositReady"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isReachedBaseGoal"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "refund"
  ): TypedContractMethod<[_batchSize: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "refundAll"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "startDate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBaseBoostDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBaseDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBaseNonBoostDeposited"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBaseRefunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBaseWithdrew"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBoostRefunded"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBoostSwapped"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "totalBoostWithdrew"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdrawBaseGoal"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawBaseSwappedAmount"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawExcessTokens"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "Deposit"
  ): TypedContractEvent<
    DepositEvent.InputTuple,
    DepositEvent.OutputTuple,
    DepositEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Refund"
  ): TypedContractEvent<
    RefundEvent.InputTuple,
    RefundEvent.OutputTuple,
    RefundEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawBaseGoal"
  ): TypedContractEvent<
    WithdrawBaseGoalEvent.InputTuple,
    WithdrawBaseGoalEvent.OutputTuple,
    WithdrawBaseGoalEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawExcessTokens"
  ): TypedContractEvent<
    WithdrawExcessTokensEvent.InputTuple,
    WithdrawExcessTokensEvent.OutputTuple,
    WithdrawExcessTokensEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawSwappedAmount"
  ): TypedContractEvent<
    WithdrawSwappedAmountEvent.InputTuple,
    WithdrawSwappedAmountEvent.OutputTuple,
    WithdrawSwappedAmountEvent.OutputObject
  >;

  filters: {
    "Deposit(address,bool,uint256,uint256)": TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;
    Deposit: TypedContractEvent<
      DepositEvent.InputTuple,
      DepositEvent.OutputTuple,
      DepositEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Refund(address,bool,uint256,uint256,uint256)": TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;
    Refund: TypedContractEvent<
      RefundEvent.InputTuple,
      RefundEvent.OutputTuple,
      RefundEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WithdrawBaseGoal(address,uint256)": TypedContractEvent<
      WithdrawBaseGoalEvent.InputTuple,
      WithdrawBaseGoalEvent.OutputTuple,
      WithdrawBaseGoalEvent.OutputObject
    >;
    WithdrawBaseGoal: TypedContractEvent<
      WithdrawBaseGoalEvent.InputTuple,
      WithdrawBaseGoalEvent.OutputTuple,
      WithdrawBaseGoalEvent.OutputObject
    >;

    "WithdrawExcessTokens(address,uint256,uint256)": TypedContractEvent<
      WithdrawExcessTokensEvent.InputTuple,
      WithdrawExcessTokensEvent.OutputTuple,
      WithdrawExcessTokensEvent.OutputObject
    >;
    WithdrawExcessTokens: TypedContractEvent<
      WithdrawExcessTokensEvent.InputTuple,
      WithdrawExcessTokensEvent.OutputTuple,
      WithdrawExcessTokensEvent.OutputObject
    >;

    "WithdrawSwappedAmount(address,uint256)": TypedContractEvent<
      WithdrawSwappedAmountEvent.InputTuple,
      WithdrawSwappedAmountEvent.OutputTuple,
      WithdrawSwappedAmountEvent.OutputObject
    >;
    WithdrawSwappedAmount: TypedContractEvent<
      WithdrawSwappedAmountEvent.InputTuple,
      WithdrawSwappedAmountEvent.OutputTuple,
      WithdrawSwappedAmountEvent.OutputObject
    >;
  };
}
